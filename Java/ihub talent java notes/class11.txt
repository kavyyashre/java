2) Static variable 
===================
A value of a variable which is not varied from object to object is called static variable.

Static variable will be created at the time of classloading and it will destroy the time of class unloading. Hence scope of static variable is same as scope of .class file.

Static variables will store in method area.

Static variable must and should declare immediately after the class using static keyword but not inside methods, blocks and constructors.

Static variable we can access directly from instance area as well as static area.

Static variable we can access by using object reference and class name.

ex:1
----
class Test
{
	//static variable 
	static int i=10;
	
	public static void main(String[] args)
	{
		System.out.println(i); // 10

		Test t = new Test();
		System.out.println(t.i); // 10

		System.out.println(Test.i); // 10			
	}
}

Note:
-----
If we won't initialize any value to static variable then JVM will initialized default values.

ex:2
-----
class Test
{
	//static variable 
	static String s;
	
	public static void main(String[] args)
	{
		System.out.println(s); //null
		
		Test t = new Test();
		System.out.println(t.s); // null

		System.out.println(Test.s); // null				
	}
}

In java, Only one copy of static variable will be created and shared to multiple objects.

ex:3
----
class Test
{
	//static variable 
	static int i = 10;
	
	public static void main(String[] args)
	{
		Test t1=new Test();
		Test t2=new Test();
		
		System.out.println(t1.i); // 10
		System.out.println(t2.i); // 10								
		t1.i=100;	

		System.out.println(t1.i); // 100
		System.out.println(t2.i); // 100	

	}
}

ex:4
-----
class Test
{	
	public static void main(String[] args)
	{	
		methodOne();

		Test t = new Test();
		t.methodOne();

		Test.methodOne();
	}
	//static method 
	public static void methodOne()
	{
		System.out.println("static-method");	
	}
}


3) Local variables 
==================
To meet temperory requirements a programmer will declare some variables inside methods, blocks and constructors such type of variables are called local variables.

Local variable will be created at the time of execution block and it will destroy when execution block is executed. Hence scope of local variable is same as scope of execution block where it is declared.

Local variables will store in Java Stack memory.

ex:1
----
class Test
{	
	public static void main(String[] args)
	{	
		//local variable 
		int i = 10;
		System.out.println(i);	
	}
}	

Note:
-----
If we won't initialize any value to local variable then JVM will not initialized any default values.

ex:2
-----
class Test
{	
	public static void main(String[] args)
	{	
		//local variable 
		int i;
		System.out.println(i);	
	}
}
o/p:
	C.T.E : variable i might not have been initialized

Note:
----
A local variable will accept only one modifier i.e final.

ex:
---
class Test
{	
	public static void main(String[] args)
	{	
		//local variable 
		final int i = 100;
		System.out.println(i); // 100	
	}
}

Preparation
===========
Q) How to declare a class in java?

	class  Example
	{
		
	}

Q) How to declare a variable in java?

	int  i = 10;
	static int i = 10;


Q) How to declare main method in java?

	public static void main(String[] args)
	{
		
	}

Q) How to declare static method in java?

	public static void methodOne()
	{
		
	}

Q) How to declare non-static method in java?

	public void methodOne()
	{
		
	}


Assignment 
==========
Q) Write a java program to find out area of rectangle (static method)?
Q) Write a java program to find out area of a square (non-static method)? 




















































